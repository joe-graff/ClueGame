{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red127\green0\blue85;\red63\green95\blue191;\red127\green159\blue191;
\red0\green0\blue192;\red100\green100\blue100;\red42\green0\blue255;\red106\green62\blue62;}
{\*\expandedcolortbl;;\csgenericrgb\c49804\c0\c33333;\csgenericrgb\c24706\c37255\c74902;\csgenericrgb\c49804\c62353\c74902;
\csgenericrgb\c0\c0\c75294;\csgenericrgb\c39216\c39216\c39216;\csgenericrgb\c16471\c0\c100000;\csgenericrgb\c41569\c24314\c24314;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs22 \cf2 package\cf0  tests;\
\
\cf2 import\cf0  \cf2 static\cf0  org.junit.Assert.*;\
\
\cf2 import\cf0  \ul java.util.HashMap\ulnone ;\
\cf2 import\cf0  \ul java.util.Map\ulnone ;\
\cf2 import\cf0  \ul java.util.Set\ulnone ;\
\
\cf2 import\cf0  org.junit.Before;\
\cf2 import\cf0  org.junit.Test;\
\
\cf2 import\cf0  clueGame.BadConfigFormatException;\
\cf2 import\cf0  clueGame.Board;\
\cf2 import\cf0  clueGame.BoardCell;\
\cf2 import\cf0  clueGame.DoorDirection;\
\
\pard\pardeftab720\partightenfactor0
\cf3 /**\cf0 \
\cf3  * \cf0 \
\cf3  * \cf4 @author\cf3  \ul Lewis\ulnone  Setter\cf0 \
\cf3  * \cf4 @author\cf3  \ul Joe\ulnone  \ul Graff\cf0 \ulnone \
\cf3  *\cf0 \
\cf3  */\cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf2 public\cf0  \cf2 class\cf0  BoardTests \{\
	\cf2 public\cf0  \cf2 static\cf0  \cf2 final\cf0  \cf2 int\cf0  \cf5 LEGEND_LENGTH\cf0  = 11;\
	\cf2 public\cf0  \cf2 static\cf0  \cf2 final\cf0  \cf2 int\cf0  \cf5 NUM_ROWS\cf0  = 25;\
	\cf2 public\cf0  \cf2 static\cf0  \cf2 final\cf0  \cf2 int\cf0  \cf5 NUM_COLUMNS\cf0  = 22;\
	\cf2 public\cf0  \cf2 static\cf0  Board \cf5 board\cf0 ;\
	\
	\cf3 /**\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3 	 * loads in the files to begin testing\cf0 \
\cf3 	 * \cf4 @throws\cf3  BadConfigFormatException \cf0 \
\cf3 	 */\cf0 \
	\cf6 @Before\cf0 	\
	\cf2 public\cf0  \cf2 void\cf0  Start() \cf2 throws\cf0  BadConfigFormatException \{\
		\cf5 board\cf0  = Board.getInstance();\
		\cf5 board\cf0 .setConfigFiles(\cf7 "ClueRooms.csv"\cf0 ,\cf7 "ClueRooms.txt"\cf0 );\
		\cf5 board\cf0 .loadRoomConfig();\
		\cf5 board\cf0 .loadBoardConfig();	\
		\cf5 board\cf0 .initialize();\
	\}\
	\
	\cf3 /**\cf0 \
\cf3 	 * tests the legend length and a few of the characters with their corresponding name \cf0 \
\cf3 	 */\cf0 \
	\cf6 @Test\cf0 \
	\cf2 public\cf0  \cf2 void\cf0  testRooms() \{\
		assertEquals(\cf5 LEGEND_LENGTH\cf0 , \cf5 board\cf0 .getLegend().size());\
		assertEquals(\cf7 "Kafadar"\cf0 , \cf5 board\cf0 .getLegend().get(\cf7 'K'\cf0 ));\
		assertEquals(\cf7 "Coors Tek"\cf0 , \cf5 board\cf0 .getLegend().get(\cf7 'T'\cf0 ));\
		assertEquals(\cf7 "Alderson"\cf0 , \cf5 board\cf0 .getLegend().get(\cf7 'A'\cf0 ));\
		assertEquals(\cf7 "CTLM"\cf0 , \cf5 board\cf0 .getLegend().get(\cf7 'C'\cf0 ));\
		assertEquals(\cf7 "Walkway"\cf0 , \cf5 board\cf0 .getLegend().get(\cf7 'W'\cf0 ));\
	\}\
	\
	\cf3 /**\cf0 \
\cf3 	 * tests the dimensions of the board\cf0 \
\cf3 	 */\cf0 \
	\cf6 @Test\cf0 \
	\cf2 public\cf0  \cf2 void\cf0  testDimensions() \{\
		assertEquals(\cf5 NUM_ROWS\cf0 , \cf5 board\cf0 .getNumRows());\
		assertEquals(\cf5 NUM_COLUMNS\cf0 , \cf5 board\cf0 .getNumColumns());\
	\}\
	\
	\cf3 /**\cf0 \
\cf3 	 * testDoorDirection tests a doorway for each way you can enter one based off of the \ul enum\cf0 \ulnone \
\cf3 	 * It also, tests a hallway and 'closet' cell to verify it does not count any cell as a door\cf0 \
\cf3 	 */\cf0 \
	\cf6 @Test\cf0 \
	\cf2 public\cf0  \cf2 void\cf0  testDoorDirection() \{\
		BoardCell \cf8 room\cf0  = \cf5 board\cf0 .getCellAt(22,9);\
		assertTrue(\cf8 room\cf0 .isDoorway());\
		assertEquals(DoorDirection.\cf5 LEFT\cf0 , \cf8 room\cf0 .getDoorDirection());\
		\cf8 room\cf0  = \cf5 board\cf0 .getCellAt(22,15);\
		assertTrue(\cf8 room\cf0 .isDoorway());\
		assertEquals(DoorDirection.\cf5 RIGHT\cf0 , \cf8 room\cf0 .getDoorDirection());\
		\cf8 room\cf0  = \cf5 board\cf0 .getCellAt(10,20);\
		assertTrue(\cf8 room\cf0 .isDoorway());\
		assertEquals(DoorDirection.\cf5 DOWN\cf0 , \cf8 room\cf0 .getDoorDirection());\
		\cf8 room\cf0  = \cf5 board\cf0 .getCellAt(20,5);\
		assertTrue(\cf8 room\cf0 .isDoorway());\
		assertEquals(DoorDirection.\cf5 UP\cf0 , \cf8 room\cf0 .getDoorDirection());\
		\cf8 room\cf0  = \cf5 board\cf0 .getCellAt(13,9);\
		assertFalse(\cf8 room\cf0 .isDoorway());\
		\cf8 room\cf0  = \cf5 board\cf0 .getCellAt(12,12);\
		assertFalse(\cf8 room\cf0 .isDoorway());\
	\}\
	\
	\cf3 /**\cf0 \
\cf3 	 * verifies number of doors is correct\cf0 \
\cf3 	 */\cf0 \
	\cf6 @Test\cf0 \
	\cf2 public\cf0  \cf2 void\cf0  testNumberOfDoors() \{\
		\cf2 int\cf0  \cf8 numDoors\cf0  = 0;\
		\cf2 for\cf0 (\cf2 int\cf0  \cf8 i\cf0  = 0; \cf8 i\cf0  < \cf5 NUM_ROWS\cf0 ; \cf8 i\cf0 ++) \{\
			\cf2 for\cf0 (\cf2 int\cf0  \cf8 j\cf0  = 0; \cf8 j\cf0  < \cf5 NUM_COLUMNS\cf0 ; \cf8 j\cf0 ++) \{\
				BoardCell \cf8 temp\cf0  = \cf5 board\cf0 .getCellAt(\cf8 i\cf0 ,\cf8 j\cf0 );\
				\cf2 if\cf0 (\cf8 temp\cf0 .isDoorway()) \
					\cf8 numDoors\cf0 ++;\
			\}\
		\}\
		assertEquals(12, \cf8 numDoors\cf0 );\
	\}\
	\
	\cf3 /**\cf0 \
\cf3 	 * test initials of cells with the board\cf0 \
\cf3 	 */\cf0 \
	\cf6 @Test\cf0 \
	\cf2 public\cf0  \cf2 void\cf0  testRoomInitials() \{\
		assertEquals(\cf7 'H'\cf0 , \cf5 board\cf0 .getCellAt(24,0).getInitial());\
		assertEquals(\cf7 'C'\cf0 , \cf5 board\cf0 .getCellAt(23,4).getInitial());\
		assertEquals(\cf7 'W'\cf0 , \cf5 board\cf0 .getCellAt(13,10).getInitial());\
		assertEquals(\cf7 'K'\cf0 , \cf5 board\cf0 .getCellAt(13,13).getInitial());\
	\}\
\
\}\
}